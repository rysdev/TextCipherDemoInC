To compile all
./compileall

To create a key
./keygen [size] > keyname

To encrpyt a text file into a cyphertext file
./otp_enc [filename] [keyname] [encport] > [cypherfilename]

To decrpyt a text file
./otp_dec [cypherfilename] [keyname] [decport]

To run the testing script
./cypherscript [encport] [decport]

observables
observable - a sequence of items that arrive asynchonously over time
components use a service,
the services utilize an http service
the http service connects to a source (our db) 
the http services returns an observable object back to our service
only components subscribed to that observable will be given updates from the http service when values change in our source
**the service makes a request to the db or to the api, the response coming back to the service is an observable
the services will usually convert the observable into a more useful object and return that object to the components who are subscribed to that observable
it is up to the component to decide what to do with that object.

behavior subject
- helps service update data back and forth

//create an object
//give default value after declaring
private user = new BehaviorSubject<string>('John');
//make object into something that can be monitored from anywhere
cast = this.user.asObservable();

//method to update BehaviorSubject
editUser(newUser) {
	this.user.next = newUser;
}

//to use service in a component, add service to constructor
user:String
editUser:String
constructor(private userService: userService);
//to receive updates from cast defined in service we need to subscribe
// expression user => this.user = user, left side of arrow is our params (or in this case 1 param with no (param1, param2), right side is expression
ngOnInit() {
	this.userService.cast.subscribe(user => this.user = user);
}
//method to take two way binded variables from html form and pass it to service method, the service will update the data in all places that are subscribed to it
editTheUser() {
	this.userService.editUser(this.editUser);
}

//template file with two way binding of editUser
<p> {{user}} </p>
<input type="text" [(ngModel)]="editUser">
<button (click)="editTheUser()">Change<button/>

app.module.ts - place where you set what is going to be used in the app?
@NGModule({
	declarations : [
		//components here
	]
	imports : [
		//modules here, decorators
		BrowserModule, FormsModule
	]
	providers: [ //service here ]
	bootstrap: [ components ]
})
export class AppModule { }
